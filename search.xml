<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot 整合 spring Data JPA]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Spring Boot 整合 spring Data JPA什么是 spring Data JPA？Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，底层使用了 Hibernate 的 JPA 技术实现，底层应用了Hibernate的具体配置。可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！ Spring Data JPA 可以极大提高开发效率。 将Spring Data JPA集成到Spring Boot1、使用maven依赖的方式，JPA依赖包和mysql驱动。12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 2、修改application.yml12345678910111213spring: datasource: primary: jdbc-url: jdbc:mysql://localhost:3306/springboot username: root password: root driver-class-name: com.mysql.jdbc.Driver jpa: hibernate: ddl-auto: update database: mysql show-sql: true create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 reate-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。 validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。 基础核心用法实体类 VO实体类 : 可与关联相对应的对象。 123456789101112131415@Data@Builder@AllArgsConstructor@NoArgsConstructorpublic class ArticleVO &#123; private Integer id; private String name; private String title; private String content; private Date createTime; private ArrayList&lt;Reader&gt; readers;` PO实体类：数据库持久层，与数据库中的数据相关联，属于平面实体类，不关联其他的对象。 1234567891011121314151617181920212223@Data@AllArgsConstructor@NoArgsConstructor@Builder@Entity@Table(name="article")public class ArticlePO &#123; @Id @GeneratedValue private Long id; @Column(nullable = false,length = 32) private String name; @Column(nullable = false, unique = true,length = 32) private String title; @Column(length = 512) private String content; private Date createTime;` 数据库操作接口：XxxRepository继承 JpaRepository&lt;T,ID&gt;为我们提供了各种针对单表的数据操作方法，用就完了。123//继承jpa，类型为Article，主键的类型为Longpublic interface ArticleRepository extends JpaRepository&lt;Article,Long&gt; &#123;&#125; service层接口:12345678910111213public interface ArticleRestService &#123; ArticleVO saveArticle(ArticleVO article); void deleteArticle(Long id); void updateArticle(ArticleVO article); ArticleVO getArticle(Long id); List&lt;ArticleVO&gt; getAll();&#125; Service层实现类：123456789101112131415161718192021222324252627282930313233343536373839404142@Servicepublic class ArticleJPARestService implements ArticleRestService &#123; @Resource private ArticleRepository articleRepository; @Resource private Mapper dozerMapper; public ArticleVO saveArticle( ArticleVO article) &#123; //把Vo实体类转为PO实体类 Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); return article; &#125; @Override public void deleteArticle(Long id) &#123; articleRepository.deleteById(id); &#125; @Override public void updateArticle(ArticleVO article) &#123; Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); &#125; @Override public ArticleVO getArticle(Long id) &#123; Optional&lt;Article&gt; article = articleRepository.findById(id); return dozerMapper.map(article.get(),ArticleVO.class); &#125; @Override public List&lt;ArticleVO&gt; getAll() &#123; List&lt;Article&gt; articleLis = articleRepository.findAll(); return DozerUtils.mapList(articleLis,ArticleVO.class); &#125;&#125; 总结总体而言，Spring Data JPA的用法相对简单，其自身带有的方法非常的多，用起来非常的便捷。但是相对于Mybatis来说不利于动态的sql查询，显得非常笨重。但是相对于hibernate来说简化了配置，底层也继承了hibernate的原理。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人简历]]></title>
    <url>%2F2019%2F08%2F14%2F%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%2F</url>
    <content type="text"><![CDATA[联系方式 手机：15279615192 Email：zwhzzz1127@gmail.com 微信号：zwh15279615192 QQ: 1127568664 个人信息 姓名：钟炜宏 性别：男 年龄：23 学历：本科 毕业院校：九江学院（2020届毕业生） 所学专业：信息管理与信息系统 所获证书：计算机二级java、CET-4 技术博客：https://www.zwhzzz.top 期望职位：java研发实习生/安卓开发工程师 期望薪资：5K-8K 期望城市：南昌、深圳 个人介绍作为应届生，我在校期间主攻java方向，了解到了Java的基础理论。对javaweb方向有浓厚的兴趣，深入学习了SSM框架的基础理论，还运用SSM框架写了几个小demo。熟悉一些前端的知识，如jQuery、Bootstrap、EasyUI的使用。而且还学习了数据库方面的知识：mysql、oracle。熟练使用git版本控制工具。我对编程充满了兴趣，热爱编程！ 项目经历招聘信息系统的设计与实现 2018年09月 招聘信息系统是本人写的第一个基于SSM框架的系统，后端采用 spring+spring-mvc+mybatis框架进行设计和编写，数据库采用mysql数据库。前端采用的是layui框架。其主要功能有对简历的增删改查、对用户信息的增删改查、对招聘信息的维护和发布。 基于SSM的学生管理系统的设计与实现 2019年03月 一个基于SSM框架的简单的学生管理系统，可以对管理员、学生、教师、班级以及年级的简单的增删改查操作，涉及到模糊查询、分页查询。运用了权限分配的知识对管理员、学生、教师三者进行权限分配。前端用的是easy-ui框架,后台使用mysql数据库进行后台的数据搭建。具体的项目请见 https://github.com/TomAlen/tomalen1.github.io.git 毕业设计-基于SSM的酒店管理系统的设计与实现 2019年07月 这是一个基于SSM框架的酒店管理系统，前端采用easyUI框架，使用mysql数据库进行后台数据库的搭建，应用ECharts工具完成营业额的数据可视化操作。主要的功能有后台用户信息管理、后台用户角色管理、后台用户权限分配、菜单管理、楼层管理、房型管理、房间管理、客户管理、预定订单管理、入住管理、统计分析管理、日志管理等功能。具体的项目请见 https://github.com/TomAlen/tomalen1.github.io.git]]></content>
      <categories>
        <category>简历</category>
      </categories>
      <tags>
        <tag>简历</tag>
        <tag>个人历程</tag>
      </tags>
  </entry>
</search>
