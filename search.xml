<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot整合MongoDB]]></title>
    <url>%2F2019%2F08%2F20%2FSpringBoot%E6%95%B4%E5%90%88MongoDB%2F</url>
    <content type="text"><![CDATA[SpringBoot整合MongoDB那么什么是MongoDB？定义MongoDB 是一个基于分布式文件存储的数据库。旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。 MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本。 MongoDB是专为可扩展性，高性能和高可用性而设计的数据库。 它可以从单服务器部署扩展到大型、复杂的多数据中心架构。利用内存计算的优势，MongoDB能够提供高性能的数据读写操作。 MongoDB的本地复制和自动故障转移功能使您的应用程序具有企业级的可靠性和操作灵活性。 简单来说，MongoDB是一个基于分布式文件存储的数据库，它是一个介于关系数据库和非关系数据库之间的产品，其主要目标是在键/值存储方式（提供了高性能和高度伸缩性）和传统的RDBMS系统（具有丰富的功能）之间架起一座桥梁，它集两者的优势于一身。 MongoDB支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型，也因为他的存储格式也使得它所存储的数据在Nodejs程序应用中使用非常流畅。 传统的关系数据库一般由数据库（database）、表（table）、记录（record）三个层次概念组成，MongoDB是由数据库（database）、集合（collection）、文档对象（document）三个层次组成。MongoDB对于关系型数据库里的表，但是集合中没有列、行和关系概念，这体现了模式自由的特点。 MongoDB中的一条记录就是一个文档，是一个数据结构，由字段和值对组成。MongoDB文档与JSON对象类似。字段的值有可能包括其它文档、数组以及文档数组。MongoDB支持OS X、Linux及Windows等操作系统，并提供了Python，PHP，Ruby，Java及C++语言的驱动程序，社区中也提供了对Erlang及.NET等平台的驱动程序 MongoDB使用原理是什么?所谓“面向集合”（Collection-Oriented），意思是数据被分组存储在数据集中，被称为一个集合（Collection)。每个集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定义任何模式（schema)。Nytro MegaRAID技术中的闪存高速缓存算法，能够快速识别数据库内大数据集中的热数据，提供一致的性能改进。模式自由（schema-free)，意味着对于存储在mongodb数据库中的文件，我们不需要知道它的任何结构定义。如果需要的话，你完全可以把不同结构的文件存储在同一个数据库里。存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各种复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized Document Format）。 核心NoSql的定义NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL用于超大规模数据的存储。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。适用于分布式计算场景 MongoDB的下载安装下载地址：https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.2.0-signed.msi 下载的网速有点慢，毕竟是国外的网站。windows下安装采用傻瓜式安装，直接下一步就行啦~ springBoot集成1、maven下加入依赖包1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;&lt;/dependency&gt; 2、application.yml配置连接12345spring: data: mongodb: uri: mongodb://test:123@localhost:27017/testdb 3、在项目入口启动类上面加一个注解。开启Mongodb审计功能.1@EnableMongoAuditing 4、数据库层操作Dao1234public interface ArticleDao extends MongoRepository&lt;Article,String&gt; &#123; //支持关键字查询，和JPA的用法一样 Article findByAuthor(String author);&#125; 以上就是SpringBoot整合MongoDB的做法。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>NoSql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis集成atomikos实现分布式事务]]></title>
    <url>%2F2019%2F08%2F19%2Fmybatis%E9%9B%86%E6%88%90atomikos%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[mybatis集成atomikos实现分布式事务什么是jta-atomikos以及分布式事务？Atomikos 是一个为Java平台提供增值服务的并且开源类事务管理器。分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简而言之，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。 整合jta-atomikos1、引入依赖包1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jta-atomikos&lt;/artifactId&gt;&lt;/dependency&gt; 2、配置yml文件，配置双数据源1234567891011121314151617181920212223primarydb: uniqueResourceName: primary xaDataSourceClassName: com.mysql.jdbc.jdbc2.optional.MysqlXADataSource xaProperties: url: jdbc:mysql://localhost:3306/springboot user: root password: root exclusiveConnectionMode: true minPoolSize: 3 maxPoolSize: 10 testQuery: SELECT 1 from dual #由于采用HikiriCP，用于检测数据库连接是否存活。secondarydb: uniqueResourceName: secondary xaDataSourceClassName: com.mysql.jdbc.jdbc2.optional.MysqlXADataSource xaProperties: url: jdbc:mysql://localhost:3306/springboot1 user: root password: root exclusiveConnectionMode: true minPoolSize: 3 maxPoolSize: 10 testQuery: SELECT 1 from dual #由于采用HikiriCP，用于检测数据库连接是否存活。 配置多数据源及事务管理1、主数据源配置，把Article的数据库整合进去，连接主数据源12345678910111213141516171819202122232425262728293031@Configuration@EnableConfigurationProperties@EnableAutoConfiguration@MapperScan(basePackages = "com.tomalen.springlanuch.generator.db1", sqlSessionTemplateRef = "primarySqlSessionTemplate")public class PrimaryDataSourceJTAConfig &#123; @Bean("primaryDataSource") @ConfigurationProperties(prefix = "primarydb") public DataSource primaryDataSource() &#123; return new AtomikosDataSourceBean(); &#125; @Bean("primarySqlSessionFactory") public SqlSessionFactory primarySqlSessionFactory(@Qualifier("primaryDataSource") DataSource dataSource) throws Exception &#123; SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource); //因为Mapper和Mapper.xml我放在同一个文件夹所以不用设资源路径 //bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mapper/*.xml")); bean.setTypeAliasesPackage("com.tomalen.springlanuch.generator.db1"); //这里需要修改为你的扫描类路径 return bean.getObject(); &#125; @Bean("primarySqlSessionTemplate") public SqlSessionTemplate primarySqlSessionTemplate( @Qualifier("primarySqlSessionFactory") SqlSessionFactory sqlSessionFactory) throws Exception &#123; return new SqlSessionTemplate(sqlSessionFactory); &#125;&#125; 2、副数据源配置，把Message的数据库整合进去，连接副数据源123456789101112131415161718192021222324252627282930313233@Configuration@EnableConfigurationProperties@EnableAutoConfiguration@MapperScan(basePackages = "com.tomalen.springlanuch.generator.db2", sqlSessionTemplateRef = "secondarySqlSessionTemplate")public class SecondaryDataSourceJTAConfig &#123; @Bean("secondaryDataSource") @ConfigurationProperties(prefix = "secondarydb") @Primary public DataSource secondaryDataSource() &#123; return new AtomikosDataSourceBean(); &#125; @Bean("secondarySqlSessionFactory") @Primary public SqlSessionFactory secondarySqlSessionFactory(@Qualifier("secondaryDataSource") DataSource dataSource) throws Exception &#123; SqlSessionFactoryBean bean = new SqlSessionFactoryBean(); bean.setDataSource(dataSource); //bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mapper/*.xml")); bean.setTypeAliasesPackage("com.tomalen.springlanuch.generator.db2"); return bean.getObject(); &#125; @Bean("secondarySqlSessionTemplate") @Primary public SqlSessionTemplate secondarySqlSessionTemplate( @Qualifier("secondarySqlSessionFactory") SqlSessionFactory sqlSessionFactory) throws Exception &#123; return new SqlSessionTemplate(sqlSessionFactory); &#125;&#125; db1 和 db2 的目录结构 修改ArticleServiceImpl文件，将message插入进去123456789101112131415@Autowiredprivate ArticleMapper articleMapper;@Autowiredprivate MessageDao messageDao;@Overridepublic int saveArticle(Article article) &#123; //测试分布式管理，同时插入两个数据库 Message message = new Message(); message.setName("Kobe"); message.setContent("Shoot Three points!"); messageDao.insert(message); return articleMapper.insert(article);&#125; 具体测试使用postMan调试接口，有兴趣可以学习下~ 这里不赘述。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>jta-atomikos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot整合Mybatis]]></title>
    <url>%2F2019%2F08%2F18%2FSpringBoot%E6%95%B4%E5%90%88Mybatis%2F</url>
    <content type="text"><![CDATA[SpringBoot整合Mybatis什么是Mybatis？MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。相对于Spring Data JPA来说，可以有非常直观的动态SQL，SQL可以写在XML里面，独立管理，动态SQL语法也容易书写与理解，易于对SQL的编写。 将Mybatis集成到Spring Boot1、引入maven依赖包123456789&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; 2、保证application.yml里面有数据库连接的配置12345678910111213141516171819#spring的相关配置spring: jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 datasource: url: jdbc:mysql://localhost:3306/springboot username: root password: root driver-class-name: com.mysql.jdbc.Driver#Mybatis的Mapper的xml文件的路径mybatis: mapper-locations: classpath:/mybatis/mapper/*.xml#相关的日志配置logging: level: com.zimug.bootlaunch: debug 3、配置Mybatis的Mapper的扫描路径123456789@SpringBootApplication@MapperScan(basePackages = &#123;"com.tomalen.springlanuch.Dao"&#125;)public class SpringLanuchApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringLanuchApplication.class, args); &#125;&#125; 安装mybatis generator插件1、安装插件 如果遇到上不了网，就登录IntellJ IDEA 的官网下载插件-->http://plugins.jetbrains.com 2、在Settings–&gt;Tool–&gt;Mybatis Generator Plugin配置相关的路径 3、在IDEA上配置mySql 以上就是SpringBoot集成MyBatis。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>springboot</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 整合 spring Data JPA]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Spring Boot 整合 spring Data JPA什么是 spring Data JPA？Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，底层使用了 Hibernate 的 JPA 技术实现，底层应用了Hibernate的具体配置。可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！ Spring Data JPA 可以极大提高开发效率。 将Spring Data JPA集成到Spring Boot1、使用maven依赖的方式，JPA依赖包和mysql驱动。12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 2、修改application.yml12345678910111213spring: datasource: primary: jdbc-url: jdbc:mysql://localhost:3306/springboot username: root password: root driver-class-name: com.mysql.jdbc.Driver jpa: hibernate: ddl-auto: update database: mysql show-sql: true create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 reate-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。 validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。 基础核心用法实体类 VO实体类 : 可与关联相对应的对象，用于展示的实体类。 123456789101112131415@Data@Builder@AllArgsConstructor@NoArgsConstructorpublic class ArticleVO &#123; private Integer id; private String name; private String title; private String content; private Date createTime; private ArrayList&lt;Reader&gt; readers;` PO实体类：数据库持久层，与数据库中的数据相关联，属于平面实体类，不关联其他的对象。 1234567891011121314151617181920212223@Data@AllArgsConstructor@NoArgsConstructor@Builder@Entity@Table(name="article")public class ArticlePO &#123; @Id @GeneratedValue private Long id; @Column(nullable = false,length = 32) private String name; @Column(nullable = false, unique = true,length = 32) private String title; @Column(length = 512) private String content; private Date createTime;` 数据库操作接口：XxxRepository继承 JpaRepository&lt;T,ID&gt;为我们提供了各种针对单表的数据操作方法，用就完了。123//继承jpa，类型为Article，主键的类型为Longpublic interface ArticleRepository extends JpaRepository&lt;Article,Long&gt; &#123;&#125; service层接口:12345678910111213public interface ArticleRestService &#123; ArticleVO saveArticle(ArticleVO article); void deleteArticle(Long id); void updateArticle(ArticleVO article); ArticleVO getArticle(Long id); List&lt;ArticleVO&gt; getAll();&#125; Service层实现类：123456789101112131415161718192021222324252627282930313233343536373839404142@Servicepublic class ArticleJPARestService implements ArticleRestService &#123; @Resource private ArticleRepository articleRepository; @Resource private Mapper dozerMapper; public ArticleVO saveArticle( ArticleVO article) &#123; //把Vo实体类转为PO实体类 Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); return article; &#125; @Override public void deleteArticle(Long id) &#123; articleRepository.deleteById(id); &#125; @Override public void updateArticle(ArticleVO article) &#123; Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); &#125; @Override public ArticleVO getArticle(Long id) &#123; Optional&lt;Article&gt; article = articleRepository.findById(id); return dozerMapper.map(article.get(),ArticleVO.class); &#125; @Override public List&lt;ArticleVO&gt; getAll() &#123; List&lt;Article&gt; articleLis = articleRepository.findAll(); return DozerUtils.mapList(articleLis,ArticleVO.class); &#125;&#125; 总结总体而言，Spring Data JPA的用法相对简单，其自身带有的方法非常的多，用起来非常的便捷。但是相对于Mybatis来说不利于动态的sql查询，显得非常笨重。但是相对于hibernate来说简化了配置，底层也继承了hibernate的原理。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人简历]]></title>
    <url>%2F2019%2F08%2F14%2F%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86%2F</url>
    <content type="text"><![CDATA[联系方式 手机：15279615192 Email：zwhzzz1127@gmail.com 微信号：zwh15279615192 QQ： 1127568664 个人信息 姓名：钟炜宏 性别：男 年龄：23 学历：本科 毕业院校：九江学院（2020届毕业生） 所学专业：信息管理与信息系统 所获证书：计算机二级java、CET-4 技术博客：https://www.zwhzzz.top 期望职位：java研发实习生/安卓开发工程师 期望薪资：5K-8K 期望城市：南昌、深圳 个人介绍作为应届生，我在校期间主攻java方向，了解到了Java的基础理论。对javaweb方向有浓厚的兴趣，深入学习了SSM框架的基础理论，还运用SSM框架写了几个小demo。熟悉一些前端的知识，如jQuery、Bootstrap、EasyUI的使用。而且还学习了数据库方面的知识：mysql、oracle。熟练使用git版本控制工具。我对编程充满了兴趣，热爱编程！ 项目经历招聘信息系统的设计与实现 2018年09月 招聘信息系统是本人写的第一个基于SSM框架的系统，后端采用 spring+spring-mvc+mybatis框架进行设计和编写，数据库采用mysql数据库。前端采用的是layui框架。其主要功能有对简历的增删改查、对用户信息的增删改查、对招聘信息的维护和发布。 基于SSM的学生管理系统的设计与实现 2019年03月 一个基于SSM框架的简单的学生管理系统，可以对管理员、学生、教师、班级以及年级的简单的增删改查操作，涉及到模糊查询、分页查询。运用了权限分配的知识对管理员、学生、教师三者进行权限分配。前端用的是easy-ui框架,后台使用mysql数据库进行后台的数据搭建。具体的项目请见 https://github.com/TomAlen/tomalen1.github.io.git 毕业设计-基于SSM的酒店管理系统的设计与实现 2019年07月 这是一个基于SSM框架的酒店管理系统，前端采用easyUI框架，使用mysql数据库进行后台数据库的搭建，应用ECharts工具完成营业额的数据可视化操作。主要的功能有后台用户信息管理、后台用户角色管理、后台用户权限分配、菜单管理、楼层管理、房型管理、房间管理、客户管理、预定订单管理、入住管理、统计分析管理、日志管理等功能。具体的项目请见 https://github.com/TomAlen/tomalen1.github.io.git]]></content>
      <categories>
        <category>简历</category>
      </categories>
      <tags>
        <tag>简历</tag>
        <tag>个人历程</tag>
      </tags>
  </entry>
</search>
