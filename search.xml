<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot 整合 spring Data JPA]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Spring Boot 整合 spring Data JPA什么是 spring Data JPA？Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，底层使用了 Hibernate 的 JPA 技术实现，底层应用了Hibernate的具体配置。可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！ Spring Data JPA 可以极大提高开发效率。 将Spring Data JPA集成到Spring Boot1、使用maven依赖的方式，JPA依赖包和mysql驱动。12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 2、修改application.yml12345678910111213spring: datasource: primary: jdbc-url: jdbc:mysql://localhost:3306/springboot username: root password: root driver-class-name: com.mysql.jdbc.Driver jpa: hibernate: ddl-auto: update database: mysql show-sql: true create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 reate-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。 validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。 基础核心用法实体类 VO实体类 : 可与关联相对应的对象。 123456789101112131415@Data@Builder@AllArgsConstructor@NoArgsConstructorpublic class ArticleVO &#123; private Integer id; private String name; private String title; private String content; private Date createTime; private ArrayList&lt;Reader&gt; readers;` PO实体类：数据库持久层，与数据库中的数据相关联，属于平面实体类，不关联其他的对象。 1234567891011121314151617181920212223@Data@AllArgsConstructor@NoArgsConstructor@Builder@Entity@Table(name="article")public class ArticlePO &#123; @Id @GeneratedValue private Long id; @Column(nullable = false,length = 32) private String name; @Column(nullable = false, unique = true,length = 32) private String title; @Column(length = 512) private String content; private Date createTime;` 数据库操作接口：XxxRepository继承 JpaRepository&lt;T,ID&gt;为我们提供了各种针对单表的数据操作方法，用就完了。123//继承jpa，类型为Article，主键的类型为Longpublic interface ArticleRepository extends JpaRepository&lt;Article,Long&gt; &#123;&#125; service层接口:12345678910111213public interface ArticleRestService &#123; ArticleVO saveArticle(ArticleVO article); void deleteArticle(Long id); void updateArticle(ArticleVO article); ArticleVO getArticle(Long id); List&lt;ArticleVO&gt; getAll();&#125; Service层实现类：123456789101112131415161718192021222324252627282930313233343536373839404142@Servicepublic class ArticleJPARestService implements ArticleRestService &#123; @Resource private ArticleRepository articleRepository; @Resource private Mapper dozerMapper; public ArticleVO saveArticle( ArticleVO article) &#123; //把Vo实体类转为PO实体类 Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); return article; &#125; @Override public void deleteArticle(Long id) &#123; articleRepository.deleteById(id); &#125; @Override public void updateArticle(ArticleVO article) &#123; Article articlePO = dozerMapper.map(article,Article.class); articleRepository.save(articlePO); &#125; @Override public ArticleVO getArticle(Long id) &#123; Optional&lt;Article&gt; article = articleRepository.findById(id); return dozerMapper.map(article.get(),ArticleVO.class); &#125; @Override public List&lt;ArticleVO&gt; getAll() &#123; List&lt;Article&gt; articleLis = articleRepository.findAll(); return DozerUtils.mapList(articleLis,ArticleVO.class); &#125;&#125; 总结总体而言，Spring Data JPA的用法相对简单，其自身带有的方法非常的多，用起来非常的便捷。但是相对于Mybatis来说不利于动态的sql查询，显得非常笨重。但是相对于hibernate来说简化了配置，底层也继承了hibernate的原理。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
